/**
   * Converts a hex string to an array of integers.
   */
export declare function hexToIntArray(hexString: any): any[];
export declare function hexListFromBNs(bnList: any): any[];
export declare function formatMemory(mem: any): any[];
export declare function findLowerBound(target: any, array: any): number;
export declare function findLowerBoundValue(target: any, array: any): any;
export declare function findClosestIndex(target: any, array: any): number;
/**
  * Find the call from @args rootCall which contains @args index (recursive)
  *
  * @param {Int} index - index of the vmtrace
  * @param {Object} rootCall  - call tree, built by the trace analyser
  * @return {Object} - return the call which include the @args index
  */
export declare function findCall(index: any, rootCall: any): any;
/**
  * Find calls path from @args rootCall which leads to @args index (recursive)
  *
  * @param {Int} index - index of the vmtrace
  * @param {Object} rootCall  - call tree, built by the trace analyser
  * @return {Array} - return the calls path to @args index
  */
export declare function buildCallPath(index: any, rootCall: any): any[];
/**
  * sha3 the given @arg value (left pad to 32 bytes)
  *
  * @param {String} value - value to sha3
  * @return {Object} - return sha3ied value
  */
export declare function sha3_256(value: any): string;
/**
  * return a regex which extract the swarmhash from the bytecode.
  *
  * @return {RegEx}
  */
export declare function swarmHashExtraction(): RegExp;
/**
  * return a regex which extract the swarmhash from the bytecode, from POC 0.3
  *
  * @return {RegEx}
  */
export declare function swarmHashExtractionPOC31(): RegExp;
/**
  * return a regex which extract the swarmhash from the bytecode, from POC 0.3
  *
  * @return {RegEx}
  */
export declare function swarmHashExtractionPOC32(): RegExp;
/**
  * return a regex which extract the cbor encoded metadata : {"ipfs": <IPFS hash>, "solc": <compiler version>} from the bytecode.
  * ref https://solidity.readthedocs.io/en/v0.6.6/metadata.html?highlight=ipfs#encoding-of-the-metadata-hash-in-the-bytecode
  * @return {RegEx}
  */
export declare function cborEncodedValueExtraction(): RegExp;
export declare function extractcborMetadata(value: any): any;
export declare function extractSwarmHash(value: any): any;
/**
  * Compare bytecode. return true if the code is equal (handle swarm hash and library references)
  * @param {String} code1 - the bytecode that is actually deployed (contains resolved library reference and a potentially different swarmhash)
  * @param {String} code2 - the bytecode generated by the compiler (contains unresolved library reference and a potentially different swarmhash)
                            this will return false if the generated bytecode is empty (asbtract contract cannot be deployed)
  *
  * @return {bool}
  */
export declare function compareByteCode(code1: any, code2: any): boolean;
export declare function groupBy(arr: any, key: any): any;
export declare function concatWithSeperator(list: any, seperator: any): any;
export declare function escapeRegExp(str: any): any;
